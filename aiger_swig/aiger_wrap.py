# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_aiger_wrap', [dirname(__file__)])
        except ImportError:
            import _aiger_wrap
            return _aiger_wrap
        if fp is not None:
            try:
                _mod = imp.load_module('_aiger_wrap', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _aiger_wrap = swig_import_helper()
    del swig_import_helper
else:
    import _aiger_wrap
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_aiger_wrap.AIGER_VERSION_swigconstant(_aiger_wrap)
AIGER_VERSION = _aiger_wrap.AIGER_VERSION

_aiger_wrap.aiger_false_swigconstant(_aiger_wrap)
aiger_false = _aiger_wrap.aiger_false

_aiger_wrap.aiger_true_swigconstant(_aiger_wrap)
aiger_true = _aiger_wrap.aiger_true

_aiger_wrap.aiger_binary_mode_swigconstant(_aiger_wrap)
aiger_binary_mode = _aiger_wrap.aiger_binary_mode

_aiger_wrap.aiger_ascii_mode_swigconstant(_aiger_wrap)
aiger_ascii_mode = _aiger_wrap.aiger_ascii_mode

_aiger_wrap.aiger_stripped_mode_swigconstant(_aiger_wrap)
aiger_stripped_mode = _aiger_wrap.aiger_stripped_mode
class aiger_and(_object):
    """Proxy of C aiger_and struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aiger_and, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aiger_and, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lhs"] = _aiger_wrap.aiger_and_lhs_set
    __swig_getmethods__["lhs"] = _aiger_wrap.aiger_and_lhs_get
    if _newclass:
        lhs = _swig_property(_aiger_wrap.aiger_and_lhs_get, _aiger_wrap.aiger_and_lhs_set)
    __swig_setmethods__["rhs0"] = _aiger_wrap.aiger_and_rhs0_set
    __swig_getmethods__["rhs0"] = _aiger_wrap.aiger_and_rhs0_get
    if _newclass:
        rhs0 = _swig_property(_aiger_wrap.aiger_and_rhs0_get, _aiger_wrap.aiger_and_rhs0_set)
    __swig_setmethods__["rhs1"] = _aiger_wrap.aiger_and_rhs1_set
    __swig_getmethods__["rhs1"] = _aiger_wrap.aiger_and_rhs1_get
    if _newclass:
        rhs1 = _swig_property(_aiger_wrap.aiger_and_rhs1_get, _aiger_wrap.aiger_and_rhs1_set)

    def __init__(self):
        """__init__(aiger_and self) -> aiger_and"""
        this = _aiger_wrap.new_aiger_and()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _aiger_wrap.delete_aiger_and
    __del__ = lambda self: None
aiger_and_swigregister = _aiger_wrap.aiger_and_swigregister
aiger_and_swigregister(aiger_and)

class aiger_symbol(_object):
    """Proxy of C aiger_symbol struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aiger_symbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aiger_symbol, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lit"] = _aiger_wrap.aiger_symbol_lit_set
    __swig_getmethods__["lit"] = _aiger_wrap.aiger_symbol_lit_get
    if _newclass:
        lit = _swig_property(_aiger_wrap.aiger_symbol_lit_get, _aiger_wrap.aiger_symbol_lit_set)
    __swig_setmethods__["next"] = _aiger_wrap.aiger_symbol_next_set
    __swig_getmethods__["next"] = _aiger_wrap.aiger_symbol_next_get
    if _newclass:
        next = _swig_property(_aiger_wrap.aiger_symbol_next_get, _aiger_wrap.aiger_symbol_next_set)
    __swig_setmethods__["reset"] = _aiger_wrap.aiger_symbol_reset_set
    __swig_getmethods__["reset"] = _aiger_wrap.aiger_symbol_reset_get
    if _newclass:
        reset = _swig_property(_aiger_wrap.aiger_symbol_reset_get, _aiger_wrap.aiger_symbol_reset_set)
    __swig_setmethods__["size"] = _aiger_wrap.aiger_symbol_size_set
    __swig_getmethods__["size"] = _aiger_wrap.aiger_symbol_size_get
    if _newclass:
        size = _swig_property(_aiger_wrap.aiger_symbol_size_get, _aiger_wrap.aiger_symbol_size_set)
    __swig_setmethods__["lits"] = _aiger_wrap.aiger_symbol_lits_set
    __swig_getmethods__["lits"] = _aiger_wrap.aiger_symbol_lits_get
    if _newclass:
        lits = _swig_property(_aiger_wrap.aiger_symbol_lits_get, _aiger_wrap.aiger_symbol_lits_set)
    __swig_setmethods__["name"] = _aiger_wrap.aiger_symbol_name_set
    __swig_getmethods__["name"] = _aiger_wrap.aiger_symbol_name_get
    if _newclass:
        name = _swig_property(_aiger_wrap.aiger_symbol_name_get, _aiger_wrap.aiger_symbol_name_set)

    def __init__(self):
        """__init__(aiger_symbol self) -> aiger_symbol"""
        this = _aiger_wrap.new_aiger_symbol()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _aiger_wrap.delete_aiger_symbol
    __del__ = lambda self: None
aiger_symbol_swigregister = _aiger_wrap.aiger_symbol_swigregister
aiger_symbol_swigregister(aiger_symbol)

class aiger(_object):
    """Proxy of C aiger struct."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, aiger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, aiger, name)
    __repr__ = _swig_repr
    __swig_setmethods__["maxvar"] = _aiger_wrap.aiger_maxvar_set
    __swig_getmethods__["maxvar"] = _aiger_wrap.aiger_maxvar_get
    if _newclass:
        maxvar = _swig_property(_aiger_wrap.aiger_maxvar_get, _aiger_wrap.aiger_maxvar_set)
    __swig_setmethods__["num_inputs"] = _aiger_wrap.aiger_num_inputs_set
    __swig_getmethods__["num_inputs"] = _aiger_wrap.aiger_num_inputs_get
    if _newclass:
        num_inputs = _swig_property(_aiger_wrap.aiger_num_inputs_get, _aiger_wrap.aiger_num_inputs_set)
    __swig_setmethods__["num_latches"] = _aiger_wrap.aiger_num_latches_set
    __swig_getmethods__["num_latches"] = _aiger_wrap.aiger_num_latches_get
    if _newclass:
        num_latches = _swig_property(_aiger_wrap.aiger_num_latches_get, _aiger_wrap.aiger_num_latches_set)
    __swig_setmethods__["num_outputs"] = _aiger_wrap.aiger_num_outputs_set
    __swig_getmethods__["num_outputs"] = _aiger_wrap.aiger_num_outputs_get
    if _newclass:
        num_outputs = _swig_property(_aiger_wrap.aiger_num_outputs_get, _aiger_wrap.aiger_num_outputs_set)
    __swig_setmethods__["num_ands"] = _aiger_wrap.aiger_num_ands_set
    __swig_getmethods__["num_ands"] = _aiger_wrap.aiger_num_ands_get
    if _newclass:
        num_ands = _swig_property(_aiger_wrap.aiger_num_ands_get, _aiger_wrap.aiger_num_ands_set)
    __swig_setmethods__["num_bad"] = _aiger_wrap.aiger_num_bad_set
    __swig_getmethods__["num_bad"] = _aiger_wrap.aiger_num_bad_get
    if _newclass:
        num_bad = _swig_property(_aiger_wrap.aiger_num_bad_get, _aiger_wrap.aiger_num_bad_set)
    __swig_setmethods__["num_constraints"] = _aiger_wrap.aiger_num_constraints_set
    __swig_getmethods__["num_constraints"] = _aiger_wrap.aiger_num_constraints_get
    if _newclass:
        num_constraints = _swig_property(_aiger_wrap.aiger_num_constraints_get, _aiger_wrap.aiger_num_constraints_set)
    __swig_setmethods__["num_justice"] = _aiger_wrap.aiger_num_justice_set
    __swig_getmethods__["num_justice"] = _aiger_wrap.aiger_num_justice_get
    if _newclass:
        num_justice = _swig_property(_aiger_wrap.aiger_num_justice_get, _aiger_wrap.aiger_num_justice_set)
    __swig_setmethods__["num_fairness"] = _aiger_wrap.aiger_num_fairness_set
    __swig_getmethods__["num_fairness"] = _aiger_wrap.aiger_num_fairness_get
    if _newclass:
        num_fairness = _swig_property(_aiger_wrap.aiger_num_fairness_get, _aiger_wrap.aiger_num_fairness_set)
    __swig_setmethods__["inputs"] = _aiger_wrap.aiger_inputs_set
    __swig_getmethods__["inputs"] = _aiger_wrap.aiger_inputs_get
    if _newclass:
        inputs = _swig_property(_aiger_wrap.aiger_inputs_get, _aiger_wrap.aiger_inputs_set)
    __swig_setmethods__["latches"] = _aiger_wrap.aiger_latches_set
    __swig_getmethods__["latches"] = _aiger_wrap.aiger_latches_get
    if _newclass:
        latches = _swig_property(_aiger_wrap.aiger_latches_get, _aiger_wrap.aiger_latches_set)
    __swig_setmethods__["outputs"] = _aiger_wrap.aiger_outputs_set
    __swig_getmethods__["outputs"] = _aiger_wrap.aiger_outputs_get
    if _newclass:
        outputs = _swig_property(_aiger_wrap.aiger_outputs_get, _aiger_wrap.aiger_outputs_set)
    __swig_setmethods__["bad"] = _aiger_wrap.aiger_bad_set
    __swig_getmethods__["bad"] = _aiger_wrap.aiger_bad_get
    if _newclass:
        bad = _swig_property(_aiger_wrap.aiger_bad_get, _aiger_wrap.aiger_bad_set)
    __swig_setmethods__["constraints"] = _aiger_wrap.aiger_constraints_set
    __swig_getmethods__["constraints"] = _aiger_wrap.aiger_constraints_get
    if _newclass:
        constraints = _swig_property(_aiger_wrap.aiger_constraints_get, _aiger_wrap.aiger_constraints_set)
    __swig_setmethods__["justice"] = _aiger_wrap.aiger_justice_set
    __swig_getmethods__["justice"] = _aiger_wrap.aiger_justice_get
    if _newclass:
        justice = _swig_property(_aiger_wrap.aiger_justice_get, _aiger_wrap.aiger_justice_set)
    __swig_setmethods__["fairness"] = _aiger_wrap.aiger_fairness_set
    __swig_getmethods__["fairness"] = _aiger_wrap.aiger_fairness_get
    if _newclass:
        fairness = _swig_property(_aiger_wrap.aiger_fairness_get, _aiger_wrap.aiger_fairness_set)
    __swig_setmethods__["ands"] = _aiger_wrap.aiger_ands_set
    __swig_getmethods__["ands"] = _aiger_wrap.aiger_ands_get
    if _newclass:
        ands = _swig_property(_aiger_wrap.aiger_ands_get, _aiger_wrap.aiger_ands_set)
    __swig_setmethods__["comments"] = _aiger_wrap.aiger_comments_set
    __swig_getmethods__["comments"] = _aiger_wrap.aiger_comments_get
    if _newclass:
        comments = _swig_property(_aiger_wrap.aiger_comments_get, _aiger_wrap.aiger_comments_set)

    def __init__(self):
        """__init__(aiger self) -> aiger"""
        this = _aiger_wrap.new_aiger()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _aiger_wrap.delete_aiger
    __del__ = lambda self: None
aiger_swigregister = _aiger_wrap.aiger_swigregister
aiger_swigregister(aiger)


def aiger_id():
    """aiger_id() -> char const *"""
    return _aiger_wrap.aiger_id()

def aiger_version():
    """aiger_version() -> char const *"""
    return _aiger_wrap.aiger_version()

def aiger_init():
    """aiger_init() -> aiger *"""
    return _aiger_wrap.aiger_init()

def aiger_init_mem(mem_mgr, arg2, arg3):
    """aiger_init_mem(void * mem_mgr, aiger_malloc arg2, aiger_free arg3) -> aiger *"""
    return _aiger_wrap.aiger_init_mem(mem_mgr, arg2, arg3)

def aiger_reset(arg1):
    """aiger_reset(aiger * arg1)"""
    return _aiger_wrap.aiger_reset(arg1)

def aiger_add_input(arg1, lit, arg3):
    """aiger_add_input(aiger * arg1, unsigned int lit, char const * arg3)"""
    return _aiger_wrap.aiger_add_input(arg1, lit, arg3)

def aiger_add_latch(arg1, lit, next, arg4):
    """aiger_add_latch(aiger * arg1, unsigned int lit, unsigned int next, char const * arg4)"""
    return _aiger_wrap.aiger_add_latch(arg1, lit, next, arg4)

def aiger_add_output(arg1, lit, arg3):
    """aiger_add_output(aiger * arg1, unsigned int lit, char const * arg3)"""
    return _aiger_wrap.aiger_add_output(arg1, lit, arg3)

def aiger_add_bad(arg1, lit, arg3):
    """aiger_add_bad(aiger * arg1, unsigned int lit, char const * arg3)"""
    return _aiger_wrap.aiger_add_bad(arg1, lit, arg3)

def aiger_add_constraint(arg1, lit, arg3):
    """aiger_add_constraint(aiger * arg1, unsigned int lit, char const * arg3)"""
    return _aiger_wrap.aiger_add_constraint(arg1, lit, arg3)

def aiger_add_justice(arg1, size, arg3, arg4):
    """aiger_add_justice(aiger * arg1, unsigned int size, unsigned int * arg3, char const * arg4)"""
    return _aiger_wrap.aiger_add_justice(arg1, size, arg3, arg4)

def aiger_add_fairness(arg1, lit, arg3):
    """aiger_add_fairness(aiger * arg1, unsigned int lit, char const * arg3)"""
    return _aiger_wrap.aiger_add_fairness(arg1, lit, arg3)

def aiger_add_reset(arg1, lit, reset):
    """aiger_add_reset(aiger * arg1, unsigned int lit, unsigned int reset)"""
    return _aiger_wrap.aiger_add_reset(arg1, lit, reset)

def aiger_add_and(arg1, lhs, rhs0, rhs1):
    """aiger_add_and(aiger * arg1, unsigned int lhs, unsigned int rhs0, unsigned int rhs1)"""
    return _aiger_wrap.aiger_add_and(arg1, lhs, rhs0, rhs1)

def aiger_add_comment(arg1, comment_line):
    """aiger_add_comment(aiger * arg1, char const * comment_line)"""
    return _aiger_wrap.aiger_add_comment(arg1, comment_line)

def aiger_check(arg1):
    """aiger_check(aiger * arg1) -> char const *"""
    return _aiger_wrap.aiger_check(arg1)

def aiger_write_to_file(arg1, arg2, arg3):
    """aiger_write_to_file(aiger * arg1, aiger_mode arg2, FILE * arg3) -> int"""
    return _aiger_wrap.aiger_write_to_file(arg1, arg2, arg3)

def aiger_write_to_string(arg1, arg2, str):
    """aiger_write_to_string(aiger * arg1, aiger_mode arg2, char * str) -> int"""
    return _aiger_wrap.aiger_write_to_string(arg1, arg2, str)

def aiger_write_generic(arg1, arg2, state, arg4):
    """aiger_write_generic(aiger * arg1, aiger_mode arg2, void * state, aiger_put arg4) -> int"""
    return _aiger_wrap.aiger_write_generic(arg1, arg2, state, arg4)

def aiger_open_and_write_to_file(arg1, file_name):
    """aiger_open_and_write_to_file(aiger * arg1, char const * file_name) -> int"""
    return _aiger_wrap.aiger_open_and_write_to_file(arg1, file_name)

def aiger_is_reencoded(arg1):
    """aiger_is_reencoded(aiger * arg1) -> int"""
    return _aiger_wrap.aiger_is_reencoded(arg1)

def aiger_reencode(arg1):
    """aiger_reencode(aiger * arg1)"""
    return _aiger_wrap.aiger_reencode(arg1)

def aiger_coi(arg1):
    """aiger_coi(aiger * arg1) -> unsigned char const *"""
    return _aiger_wrap.aiger_coi(arg1)

def aiger_read_from_file(arg1, arg2):
    """aiger_read_from_file(aiger * arg1, FILE * arg2) -> char const *"""
    return _aiger_wrap.aiger_read_from_file(arg1, arg2)

def aiger_read_generic(arg1, state, arg3):
    """aiger_read_generic(aiger * arg1, void * state, aiger_get arg3) -> char const *"""
    return _aiger_wrap.aiger_read_generic(arg1, state, arg3)

def aiger_error(arg1):
    """aiger_error(aiger * arg1) -> char const *"""
    return _aiger_wrap.aiger_error(arg1)

def aiger_open_and_read_from_file(arg1, arg2):
    """aiger_open_and_read_from_file(aiger * arg1, char const * arg2) -> char const *"""
    return _aiger_wrap.aiger_open_and_read_from_file(arg1, arg2)

def aiger_write_symbols_to_file(arg1, file):
    """aiger_write_symbols_to_file(aiger * arg1, FILE * file) -> int"""
    return _aiger_wrap.aiger_write_symbols_to_file(arg1, file)

def aiger_write_comments_to_file(arg1, file):
    """aiger_write_comments_to_file(aiger * arg1, FILE * file) -> int"""
    return _aiger_wrap.aiger_write_comments_to_file(arg1, file)

def aiger_strip_symbols_and_comments(arg1):
    """aiger_strip_symbols_and_comments(aiger * arg1) -> unsigned int"""
    return _aiger_wrap.aiger_strip_symbols_and_comments(arg1)

def aiger_get_symbol(arg1, lit):
    """aiger_get_symbol(aiger * arg1, unsigned int lit) -> char const *"""
    return _aiger_wrap.aiger_get_symbol(arg1, lit)

def aiger_lit2tag(arg1, lit):
    """aiger_lit2tag(aiger * arg1, unsigned int lit) -> int"""
    return _aiger_wrap.aiger_lit2tag(arg1, lit)

def aiger_is_input(arg1, lit):
    """aiger_is_input(aiger * arg1, unsigned int lit) -> aiger_symbol *"""
    return _aiger_wrap.aiger_is_input(arg1, lit)

def aiger_is_latch(arg1, lit):
    """aiger_is_latch(aiger * arg1, unsigned int lit) -> aiger_symbol *"""
    return _aiger_wrap.aiger_is_latch(arg1, lit)

def aiger_is_and(arg1, lit):
    """aiger_is_and(aiger * arg1, unsigned int lit) -> aiger_and *"""
    return _aiger_wrap.aiger_is_and(arg1, lit)

def aiger_redefine_input_as_and(public, input_lit, rhs0, rhs1):
    """aiger_redefine_input_as_and(aiger * public, unsigned int input_lit, unsigned int rhs0, unsigned int rhs1)"""
    return _aiger_wrap.aiger_redefine_input_as_and(public, input_lit, rhs0, rhs1)

def get_aiger_symbol(base, index):
    """get_aiger_symbol(aiger_symbol * base, unsigned int index) -> aiger_symbol *"""
    return _aiger_wrap.get_aiger_symbol(base, index)

def get_aiger_and(base, index):
    """get_aiger_and(aiger_and * base, unsigned int index) -> aiger_and *"""
    return _aiger_wrap.get_aiger_and(base, index)
# This file is compatible with both classic and new-style classes.


